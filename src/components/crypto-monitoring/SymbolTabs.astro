---
import SymbolMonitor from "./SymbolMonitor.astro";
import type { ICryptoPair } from "../../types";

interface Props {
  pairs: Array<ICryptoPair>;
}

const { pairs } = Astro.props;
---

<div id="tabs-container" class="rounded border px-2 py-2">
  <div class="tabs">
    {
      pairs.map((pair, index) => (
        <button
          class="tab rounded-t border border-b-0 border-slate-500 px-2 py-1 font-semibold"
          data-content-id={`content-${pair.crypto}-${pair.fiat}`}
        >
          {pair.crypto}-{pair.fiat}
        </button>
      ))
    }
  </div>
  <section class="content">
    {
      pairs.map((pair, index) => (
        <div
          class={`item ${index === 0 ? "selected" : ""}`}
          id={`content-${pair.crypto}-${pair.fiat}`}
        >
          <SymbolMonitor symbol={pair} />
        </div>
      ))
    }
  </section>
</div>

<script>
  document.body.addEventListener("htmx:wsConfigSend", ((event: CustomEvent) => {
    if (Object.hasOwn(event.detail.parameters, "crypto")) {
      const { asset, fiat }: { asset: string; fiat: string } =
        event.detail.parameters.crypto;

      const volumeInputElem = document.getElementById(
        `input-volume-${asset}-${fiat}`,
      ) as HTMLInputElement;

      event.detail.parameters.crypto["volume"] = volumeInputElem
        ? volumeInputElem.value
        : "1";
    }
  }) as EventListener);

  // Tabs
  let tabsContainer = document.getElementById("tabs-container");
  let tabSelected = document.querySelector("#tabs-container .tabs .tab");
  let tabSelectedContent = document.getElementById(
    tabSelected?.getAttribute("data-content-id") || "",
  );

  tabSelected?.classList.add("selected");
  tabSelectedContent?.classList.add("selected");

  tabsContainer?.addEventListener("click", (event) => {
    const target = event.target as Element;
    if (target && target.classList.contains("tab")) {
      tabSelected?.classList.remove("selected");
      tabSelectedContent?.classList.remove("selected");

      tabSelected = target;
      tabSelected.classList.add("selected");

      const tabContentId = tabSelected?.getAttribute("data-content-id");

      if (tabContentId) {
        tabSelectedContent = document.getElementById(tabContentId);
        tabSelectedContent?.classList.add("selected");
      }
    }
  });
</script>

<style>
  #tabs-container {
    height: 100%;
    display: grid;
    grid-template-columns: 1fr;
    grid-template-rows: auto 1fr;
  }

  .tabs {
    display: flex;
    gap: 1rem;
  }

  button.tab.selected {
    background-color: rgb(212, 120, 44);
    color: rgb(0, 0, 0);
  }

  .content {
    position: relative;
    overflow-x: hidden;
    overflow-y: auto;
  }

  .content .item {
    opacity: 0;
    visibility: hidden;
    position: absolute;
    width: 100%;
  }

  .content .selected {
    opacity: 1;
    visibility: visible;
  }
</style>
